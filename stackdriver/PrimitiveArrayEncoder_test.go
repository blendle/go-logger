package stackdriver

// MIT License
//
// Copyright (c) 2017 Tommy Chen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// Code generated by mockery v1.0.0

import mock "github.com/stretchr/testify/mock"

// PrimitiveArrayEncoder is an autogenerated mock type for the PrimitiveArrayEncoder type
type PrimitiveArrayEncoder struct {
	mock.Mock
}

// AppendBool provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendBool(_a0 bool) {
	_m.Called(_a0)
}

// AppendByteString provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendByteString(_a0 []byte) {
	_m.Called(_a0)
}

// AppendComplex128 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendComplex128(_a0 complex128) {
	_m.Called(_a0)
}

// AppendComplex64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendComplex64(_a0 complex64) {
	_m.Called(_a0)
}

// AppendFloat32 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendFloat32(_a0 float32) {
	_m.Called(_a0)
}

// AppendFloat64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendFloat64(_a0 float64) {
	_m.Called(_a0)
}

// AppendInt provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt(_a0 int) {
	_m.Called(_a0)
}

// AppendInt16 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt16(_a0 int16) {
	_m.Called(_a0)
}

// AppendInt32 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt32(_a0 int32) {
	_m.Called(_a0)
}

// AppendInt64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt64(_a0 int64) {
	_m.Called(_a0)
}

// AppendInt8 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendInt8(_a0 int8) {
	_m.Called(_a0)
}

// AppendString provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendString(_a0 string) {
	_m.Called(_a0)
}

// AppendUint provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint(_a0 uint) {
	_m.Called(_a0)
}

// AppendUint16 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint16(_a0 uint16) {
	_m.Called(_a0)
}

// AppendUint32 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint32(_a0 uint32) {
	_m.Called(_a0)
}

// AppendUint64 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint64(_a0 uint64) {
	_m.Called(_a0)
}

// AppendUint8 provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUint8(_a0 uint8) {
	_m.Called(_a0)
}

// AppendUintptr provides a mock function with given fields: _a0
func (_m *PrimitiveArrayEncoder) AppendUintptr(_a0 uintptr) {
	_m.Called(_a0)
}
